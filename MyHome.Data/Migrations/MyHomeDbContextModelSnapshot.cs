// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyHome.Data;

#nullable disable

namespace MyHome.Data.Migrations
{
    [DbContext(typeof(MyHomeDbContext))]
    partial class MyHomeDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MyHome.Domain.AdditionalLogo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("AdditionalLogo");
                });

            modelBuilder.Entity("MyHome.Domain.Auction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("Auction");
                });

            modelBuilder.Entity("MyHome.Domain.BrochureMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<double>("latitude")
                        .HasColumnType("float");

                    b.Property<double>("longitude")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId")
                        .IsUnique();

                    b.ToTable("BrochureMaps");
                });

            modelBuilder.Entity("MyHome.Domain.CustomData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DevelopmentLogoBgColour")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsMyHomePassport")
                        .HasColumnType("bit");

                    b.Property<string>("PromotionalSnippet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId")
                        .IsUnique();

                    b.ToTable("CustomDatas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsMyHomePassport = false,
                            PropertyId = 1
                        },
                        new
                        {
                            Id = 2,
                            DevelopmentLogoBgColour = "",
                            IsMyHomePassport = false,
                            PromotionalSnippet = "",
                            PropertyId = 2
                        });
                });

            modelBuilder.Entity("MyHome.Domain.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Lat")
                        .HasColumnType("float");

                    b.Property<double>("Lon")
                        .HasColumnType("float");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId")
                        .IsUnique();

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Lat = 0.0,
                            Lon = 0.0,
                            PropertyId = 1
                        },
                        new
                        {
                            Id = 2,
                            Lat = 0.0,
                            Lon = 0.0,
                            PropertyId = 2
                        });
                });

            modelBuilder.Entity("MyHome.Domain.Negotiator", b =>
                {
                    b.Property<int>("NegotiatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NegotiatorId"));

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Phone")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<string>("WebSite")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("NegotiatorId");

                    b.HasIndex("PropertyId")
                        .IsUnique();

                    b.ToTable("Negotiators");

                    b.HasData(
                        new
                        {
                            NegotiatorId = 1,
                            Email = "Raycookesales@raycooke.ie",
                            Name = "Ray Cooke Sales",
                            Phone = "016875800",
                            PropertyId = 1,
                            WebSite = "http://www.raycooke.ie"
                        },
                        new
                        {
                            NegotiatorId = 2,
                            Email = "fiona.mcgowan@masongroup.ie",
                            Name = "Fiona McGowan",
                            Phone = "01 8304000",
                            PropertyId = 2,
                            WebSite = "http://www.masonestates.ie/"
                        });
                });

            modelBuilder.Entity("MyHome.Domain.OpenViewing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("OpenViewing");
                });

            modelBuilder.Entity("MyHome.Domain.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("PhotoURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<string>("UploadedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("Photos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PhotoURL = "https://photos-a.propertyimages.ie/media/3/9/4/4690493/ee2ff749-6d34-4f9f-922e-80e225d9cfda_l.jpg",
                            PropertyId = 2,
                            UploadedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            PhotoURL = "https://photos-a.propertyimages.ie/media/3/9/4/4690493/5c9d3934-1f14-4039-a96b-68fe61e94035_l.jpg",
                            PropertyId = 2,
                            UploadedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            PhotoURL = "https://photos-a.propertyimages.ie/media/6/9/4/4690496/b9f74d3a-fe89-400a-830a-060311ea24a1_l.jpg",
                            PropertyId = 1,
                            UploadedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            PhotoURL = "https://photos-a.propertyimages.ie/media/6/9/4/4690496/48d310d0-de63-4a9b-ae83-db8834c52b59_l.jpg",
                            PropertyId = 1,
                            UploadedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("MyHome.Domain.Property", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ActivatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Address")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Baths")
                        .HasColumnType("int");

                    b.Property<int>("Beds")
                        .HasColumnType("int");

                    b.Property<string>("BerRating")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("BrochureUrl")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOnDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayAddress")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("EnergyRatingMediaPath")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("GroupAddress")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("GroupEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("GroupLogoBgColor")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("GroupLogoUrl")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("GroupName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("GroupPhoneNumber")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("GroupPremiumHeadTextColour")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("GroupPremiumJointLogoUrl")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("GroupPremiumLogoUrl")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("GroupRectangularLogoUrl")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("GroupUrl")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("GroupUrlSlugIdentifier")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("HasVideos")
                        .HasColumnType("bit");

                    b.Property<bool>("HasWebP")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBrandBooster")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBuildToRent")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBuildToRentDevelopment")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFavourite")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMappedAccurately")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNew")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPremiumAd")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrivateLandlord")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSaleAgreed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTopSpot")
                        .HasColumnType("bit");

                    b.Property<string>("JointGroupPremiumJointLogo")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("JointGroupRectangularLogoUrl")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("MainPhoto")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("MainPhotoWeb")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("OrderedDisplayAddress")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("PhotoCount")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("PriceChangeIsIncrease")
                        .HasColumnType("bit");

                    b.Property<string>("PropertyClass")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("PropertyClassId")
                        .HasColumnType("int");

                    b.Property<string>("PropertyClassUrlSlug")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PropertyStatus")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PropertyType")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("RefreshedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("RelatedPropertiesTotal")
                        .HasColumnType("int");

                    b.Property<int>("SaleTypeId")
                        .HasColumnType("int");

                    b.Property<string>("SeoDisplayAddress")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("SeoUrl")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("SizeStringMeters")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Properties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActivatedOn = new DateTime(2023, 3, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Address = "46 Ashfield Avenue",
                            Baths = 2,
                            Beds = 3,
                            BerRating = "C2",
                            BrochureUrl = "/residential/brochure/46-ashfield-avenue-kingswood-dublin-24/4690496",
                            CreatedOnDate = new DateTime(2023, 3, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnergyRatingMediaPath = "//photos-a.propertyimages.ie/static/images/energyRating/C2.png",
                            GroupAddress = "6 Village Green, Tallaght, Dublin 24",
                            GroupEmail = "tallaght@raycooke.ie",
                            GroupId = 254910,
                            GroupLogoBgColor = "#000000",
                            GroupLogoUrl = "https://photos-a.propertyimages.ie/groups/0/1/9/254910/logo.jpg",
                            GroupName = "Ray Cooke Auctioneers",
                            GroupPhoneNumber = "Ray Cooke Auctioneers",
                            GroupPremiumHeadTextColour = "#FFFFFF",
                            GroupUrl = "/estate-agents/ray-cooke-auctioneers-tallaght-254910",
                            GroupUrlSlugIdentifier = "ray-cooke-auctioneers-tallaght",
                            HasVideos = false,
                            HasWebP = false,
                            IsActive = false,
                            IsBrandBooster = false,
                            IsBuildToRent = false,
                            IsBuildToRentDevelopment = false,
                            IsFavourite = false,
                            IsMappedAccurately = false,
                            IsNew = false,
                            IsPremiumAd = false,
                            IsPrivateLandlord = false,
                            IsSaleAgreed = false,
                            IsTopSpot = false,
                            OrderedDisplayAddress = "46 ashfield avenue kingswood dublin 24",
                            PhotoCount = 0,
                            Price = 465000m,
                            PriceChangeIsIncrease = false,
                            PropertyClassId = 0,
                            RefreshedOn = new DateTime(2023, 3, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RelatedPropertiesTotal = 0,
                            SaleTypeId = 0,
                            SeoDisplayAddress = "46-ashfield-avenue-kingswood-dublin-24",
                            SeoUrl = "/residential/brochure/46-ashfield-avenue-kingswood-dublin-24/4690496",
                            SizeStringMeters = 0
                        },
                        new
                        {
                            Id = 2,
                            ActivatedOn = new DateTime(2023, 3, 31, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Address = "96 Navan Road",
                            Baths = 3,
                            Beds = 4,
                            BerRating = "E2",
                            BrochureUrl = "/residential/brochure/96-navan-road-navan-road-dublin-7/4690493",
                            CreatedOnDate = new DateTime(2023, 3, 31, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            EnergyRatingMediaPath = "//photos-a.propertyimages.ie/static/images/energyRating/E2.png",
                            GroupAddress = "148 Phibsboro Road, Phibsboro, Dublin 7",
                            GroupEmail = "phibsboro@masonestates.ie",
                            GroupId = 5598,
                            GroupLogoBgColor = "#70d0f4",
                            GroupLogoUrl = "https://photos-a.propertyimages.ie/groups/8/9/5/5598/logo.jpg",
                            GroupName = "Mason Estates Phibsboro",
                            GroupPhoneNumber = "Mason Estates Phibsboro",
                            GroupPremiumHeadTextColour = "#FFFFFF",
                            GroupUrl = "/estate-agents/mason-estates-phibsboro-5598",
                            GroupUrlSlugIdentifier = "mason-estates-phibsboro",
                            HasVideos = false,
                            HasWebP = false,
                            IsActive = false,
                            IsBrandBooster = false,
                            IsBuildToRent = false,
                            IsBuildToRentDevelopment = false,
                            IsFavourite = false,
                            IsMappedAccurately = false,
                            IsNew = false,
                            IsPremiumAd = false,
                            IsPrivateLandlord = false,
                            IsSaleAgreed = false,
                            IsTopSpot = false,
                            OrderedDisplayAddress = "96 navan road navan road   dublin 7",
                            PhotoCount = 0,
                            Price = 565600m,
                            PriceChangeIsIncrease = false,
                            PropertyClassId = 0,
                            RefreshedOn = new DateTime(2023, 3, 31, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            RelatedPropertiesTotal = 0,
                            SaleTypeId = 0,
                            SeoDisplayAddress = "96-navan-road-navan-road-dublin-7",
                            SeoUrl = "/residential/brochure/96-navan-road-navan-road-dublin-7/4690493",
                            SizeStringMeters = 0
                        });
                });

            modelBuilder.Entity("MyHome.Domain.RelatedPropertyID", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomDataId")
                        .HasColumnType("int");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomDataId");

                    b.ToTable("RelatedPropertyID");
                });

            modelBuilder.Entity("MyHome.Domain.TravelTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("TravelTime");
                });

            modelBuilder.Entity("MyHome.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PasswordHash = new byte[] { 254, 140, 18, 228, 138, 174, 63, 69, 233, 192, 76, 27, 3, 126, 225, 111, 119, 90, 234, 146, 8, 184, 81, 8, 9, 95, 51, 112, 199, 242, 43, 157, 158, 179, 248, 146, 97, 0, 116, 46, 213, 192, 90, 219, 3, 21, 211, 255, 61, 105, 211, 211, 57, 209, 57, 174, 135, 0, 88, 250, 206, 248, 188, 73 },
                            PasswordSalt = new byte[] { 228, 173, 173, 108, 169, 133, 232, 96, 142, 225, 93, 61, 78, 55, 141, 248, 16, 204, 248, 252, 152, 177, 222, 74, 198, 138, 128, 31, 160, 149, 210, 243, 13, 118, 229, 17, 219, 110, 217, 114, 40, 2, 28, 11, 28, 178, 6, 7, 90, 189, 211, 242, 57, 44, 169, 166, 0, 189, 159, 52, 93, 153, 194, 98, 152, 72, 152, 153, 104, 4, 1, 108, 97, 118, 127, 132, 220, 77, 138, 214, 50, 141, 49, 155, 55, 120, 215, 251, 120, 233, 161, 55, 152, 225, 164, 182, 182, 178, 174, 21, 3, 131, 244, 152, 203, 127, 195, 237, 211, 100, 28, 127, 247, 82, 131, 60, 34, 15, 253, 51, 30, 245, 90, 224, 78, 210, 201, 239 },
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("MyHome.Domain.VirtualViewing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("VirtualViewing");
                });

            modelBuilder.Entity("MyHome.Domain.AdditionalLogo", b =>
                {
                    b.HasOne("MyHome.Domain.Property", "Property")
                        .WithMany("AdditionalLogoUrls")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("MyHome.Domain.Auction", b =>
                {
                    b.HasOne("MyHome.Domain.Property", "Property")
                        .WithMany("AuctionList")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("MyHome.Domain.BrochureMap", b =>
                {
                    b.HasOne("MyHome.Domain.Property", "Property")
                        .WithOne("BrochureMap")
                        .HasForeignKey("MyHome.Domain.BrochureMap", "PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("MyHome.Domain.CustomData", b =>
                {
                    b.HasOne("MyHome.Domain.Property", "Property")
                        .WithOne("CustomData")
                        .HasForeignKey("MyHome.Domain.CustomData", "PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("MyHome.Domain.Location", b =>
                {
                    b.HasOne("MyHome.Domain.Property", "Property")
                        .WithOne("Location")
                        .HasForeignKey("MyHome.Domain.Location", "PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("MyHome.Domain.Negotiator", b =>
                {
                    b.HasOne("MyHome.Domain.Property", "Property")
                        .WithOne("Negotiator")
                        .HasForeignKey("MyHome.Domain.Negotiator", "PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("MyHome.Domain.OpenViewing", b =>
                {
                    b.HasOne("MyHome.Domain.Property", "Property")
                        .WithMany("OpenViewings")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("MyHome.Domain.Photo", b =>
                {
                    b.HasOne("MyHome.Domain.Property", "Property")
                        .WithMany("Photos")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("MyHome.Domain.RelatedPropertyID", b =>
                {
                    b.HasOne("MyHome.Domain.CustomData", "CustomData")
                        .WithMany("RelatedPropertyIDs")
                        .HasForeignKey("CustomDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomData");
                });

            modelBuilder.Entity("MyHome.Domain.TravelTime", b =>
                {
                    b.HasOne("MyHome.Domain.Property", "Property")
                        .WithMany("TravelTimes")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("MyHome.Domain.VirtualViewing", b =>
                {
                    b.HasOne("MyHome.Domain.Property", "Property")
                        .WithMany("VirtualViewings")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("MyHome.Domain.CustomData", b =>
                {
                    b.Navigation("RelatedPropertyIDs");
                });

            modelBuilder.Entity("MyHome.Domain.Property", b =>
                {
                    b.Navigation("AdditionalLogoUrls");

                    b.Navigation("AuctionList");

                    b.Navigation("BrochureMap")
                        .IsRequired();

                    b.Navigation("CustomData");

                    b.Navigation("Location");

                    b.Navigation("Negotiator");

                    b.Navigation("OpenViewings");

                    b.Navigation("Photos");

                    b.Navigation("TravelTimes");

                    b.Navigation("VirtualViewings");
                });
#pragma warning restore 612, 618
        }
    }
}
